# 二、设计内容：镇江公交换乘查询系统

## 2.1 题目简述

公交换乘在一个城市的公共交通系统设计中占据着极其重要的地位，公交换乘的过程将直接影响居民出行时间的长短，公交换乘的过程如下：指定一起始公交站点与目的公交站点，依据参考因素，例如：换乘路线的路径最短、耗费时间最短、所需车资最少等，经过分析处理得到可达目的站点换乘次数最少的乘车方案，具体可分为： 

1. 零次换乘 起始站点和目的站点之间存在可直达的公交线路，即出行居民无需转乘就可以直接到达目的站点，这也是较为理想的方案。

2. 一次换乘 起始站点和目的站点之间没有公交车直接往返，即两站点之间不存在可直达的公交线路，则出行居民需要在途经的某个站点下车，然后转乘另一线路公交车才能达到目的站点。

3. 多次换乘 在起始站点和目的站点之间没有可直达的公交线路，出行居民需要经过一次以上的转乘才能达到目的站点，则得到多次换乘方案。

## 2.2功能模块要求

本次课程需要以镇江多条公交线路为例，要求本系统能提供一个友好的功能菜单，菜单中应至少包括（但不限于）以下几个基本功能：

1. 初始化系统：
基本信息初始化，包括公交线路编号、站点名称、站点之间票价、耗费时间、发车时间等（根据自己设计可以增加相关公交车信息，）；
基本要求：将公交线路的基本信息存于文件，每次运行程序时，通过文件对基本信息初始化；
2. 公交信息维护：

由于修路等城市规划变动的原因，公交线路可能会有微调，例如需要增加、删除或者修改部分站点的信息；修改之后的课程信息写回文件，便于下一次初始化；

3. 查询功能：
   - 从键盘输入编号，给出具体行车路线、行车时间等；
   - 从键盘输入始发站和终点站，完成公交线路换乘查询（零次，1次，多次）
   - 旅游线路规划：金山、焦山、北固山、南山风景区，为用户定制最优各景点间游玩路线。（此项根据自己的设计来完成路线定制，可以是两景点之间、四景点串联等）

4. 用户角色：
 分为管理员和游客，管理员可以进行初始化、公交信息维护和查询功能；游客只可以使用查询功能。


# stops.csv
stop_id, route_id, stop_name
1,  1,  火车站
2,  1,  中山路
3,  1,  金山公园
4,  1,  西津渡
5,  1,  镇江博物馆
6,  1,  大市口
7,  1,  梦溪广场
8,  2,  南门外
9,  2,  第一人民医院
10, 2,  江苏大学
2,  2,  中山路
11, 2,  黄山公园
12, 2,  学府路
13, 2,  东吴路
29, 2,  花山湾
14, 3,  世纪花园
15, 3,  金山湖
16, 3,  南山风景区
2,  3,  中山路
17, 3,  滨江新城
18, 3,  三山公园
19, 3,  丁卯桥
20, 4,  北府路
21, 4,  万达广场
6,  4,  大市口
22, 4,  迎江路
23, 4,  西站
24, 4,  镇江体育馆
25, 4,  京口区政府
26, 4,  翠竹园
27, 5,  小东门
28, 5,  江滨大道
29, 5,  花山湾
26, 5,  翠竹园
30, 5,  南门外
31, 5,  运河路
32, 5,  光明小区
33, 5,  南徐大道
34, 5,  九华山

# routes.csv
route_id, start, destination, cost, time 
1,  1,  2,  1.5,    5
1,  2,  3,  1.5,    5
1,  3,  4,  1.5,    5
1,  4,  5,  1.5,    5
1,  5,  6,  1.5,    5
1,  6,  7,  1.5,    5

2,  8,  9,  2.0,    6
2,  9,  10, 2.0,    6
2,  10, 2,  2.0,    6
2,  2,  11, 2.0,    6
2,  11, 12, 2.0,    6
2,  12, 13, 2.0,    6
2,  13, 29, 2.0,    6
2,  29, 14, 2.0,    6

3,  14, 15, 2.5,    8
3,  15, 16, 2.5,    8
3,  16, 2,  2.5,    8
3,  2,  17, 2.5,    8
3,  17, 18, 2.5,    8
3,  18, 19, 2.5,    8

4,  20, 21, 1.5,    5
4,  21, 6,  1.5,    5
4,  6,  22, 1.5,    5
4,  22, 23, 1.5,    5
4,  23, 24, 1.5,    5
4,  24, 25, 1.5,    5
4,  25, 26, 1.5,    5

5,  27, 28, 1.75,   6
5,  28, 29, 1.75,   6
5,  29, 26, 1.75,   6
5,  26, 30, 1.75,   6
5,  30, 31, 1.75,   6
5,  31, 32, 1.75,   6
5,  32, 33, 1.75,   6
5,  33, 34, 1.75,   6

/**
 * File: Controller/RouteController.h
 * Date: 2024.07.07
 * Author: Nulla
 */

#ifndef ROUTE_CONTROLLER_H
#define ROUTE_CONTROLLER_H

#include <string>
#include <vector>
#include <unordered_map>
#include <list>

struct VexNode {
    int stop_index;
    ArcNode* first_in;
    ArcNode* first_out;
    VexNode(int i) : stop_index(i), first_in(nullptr), first_out(nullptr) {}
};

struct ArcNode {
    // index of two vertices
    int head_index;
    int tail_index;

    // weight of the edge
    float cost;
    float fare;

    // pointer to the next ArcNode
    ArcNode* head_link;
    ArcNode* tail_link;

    ArcNode(int h, int t, float c, float f) :
    head_index(h), tail_index(t), cost(c), fare(f),
    head_link(nullptr), tail_link(nullptr) {}
};

std::unordered_map<int, std::string> stop_list;

class RouteController {
    public:
    void loadRoute(const std::string& file_path);
    void reloadRoute(std::string file_path);
    void showRoute(int route_id);
    void showAllStops();
    void queryShortestPath(int start_stop_id, int end_stop_id);
    void queryCheapestPath(int start_stop_id, int end_stop_id);
    void deleteNode(int stop_id);
    void addNode(int stop_id, std::string stop_name);
};

#endif // ROUTE_CONTROLLER_H

/**
 * File: Controller/RouteController.cpp
 * Date: 2024.07.07
 * Author: Nulla
 */

#include "RouteController.h"
#include <iostream>
#include <fstream>
#include <sstream>

using namespace std;



void RouteController::loadRoute(const string& file_path) {
    ifstream file(file_path);
    if (!file.is_open()) {
        cerr << "Error: Failed to open route file " << file_path << endl;
        return;
    }

    string line;
    bool header = true;
    while (getline(file, line)) {
        if (header) {
            header = false;
            continue;
        }

        stringstream ss(line);
        string route_id_str, start_stop_id_str, end_stop_id_str, cost_str, fare_str;
        getline(ss, route_id_str, ',');
        getline(ss, start_stop_id_str, ',');
        getline(ss, end_stop_id_str, ',');
        getline(ss, cost_str, ',');
        getline(ss, fare_str, ',');

        // Convert string to specific data type
        int route_id = stoi(route_id_str);
        int start_stop_id = stoi(start_stop_id_str);
        int end_stop_id = stoi(end_stop_id_str);
        float cost = stof(cost_str);
        float fare = stof(fare_str);


    }
}